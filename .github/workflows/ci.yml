name: CI

# yamllint disable-line rule:truthy
on:
  push:

env:
  CODE_FOLDER: zigpy_zboss
  CACHE_VERSION: 3
  DEFAULT_PYTHON: 3.10.8
  PRE_COMMIT_CACHE_PATH: ~/.cache/pre-commit

jobs:
  # Separate job to pre-populate the base dependency cache
  # This prevent upcoming jobs to do the same individually
  prepare-base:
    name: Prepare base dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.8", "3.11.0", "3.12"]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{ steps.python.outputs.python-version }}-
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -U pip setuptools pre-commit
          pip install -r requirements_test.txt
          pip install -e .

  pre-commit:
    name: Prepare pre-commit environment
    runs-on: ubuntu-latest
    needs: prepare-base
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('pyproject.toml') }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v4
        with:
          path: ${{ env.PRE_COMMIT_CACHE_PATH }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-pre-commit-
      - name: Install pre-commit dependencies
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          . venv/bin/activate
          pre-commit install-hooks
      - name: Cache pre-commit environment
        uses: actions/cache/save@v4
        with:
          path: ${{ env.PRE_COMMIT_CACHE_PATH }}
          key: ${{ steps.cache-precommit.outputs.cache-primary-key }}
      - name: Lint and static analysis
        run: |
          . venv/bin/activate
          pre-commit run --show-diff-on-failure --color=always --all-files

  lint-flake8:
    name: Check flake8
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('pyproject.toml') }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v4
        with:
          path: ${{ env.PRE_COMMIT_CACHE_PATH }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Fail job if cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Register flake8 problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/flake8.json"
      - name: Run flake8
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual flake8 --all-files

  pytest:
    runs-on: ubuntu-latest
    needs: prepare-base
    strategy:
      matrix:
        python-version: ["3.10.8", "3.11.0", "3.12"]
    name: >-
      Run tests Python ${{ matrix.python-version }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        id: python
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('pyproject.toml') }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Register Python problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/python.json"
      - name: Install Pytest Annotation plugin
        run: |
          . venv/bin/activate
          # Ideally this should be part of our dependencies
          # However this plugin is fairly new and doesn't run correctly
          # on a non-GitHub environment.
          pip install pytest-github-actions-annotate-failures
      - name: Run pytest
        run: |
          . venv/bin/activate
          pytest \
            -qq \
            --timeout=20 \
            --durations=10 \
            -o console_output_style=count \
            -p no:sugar \
            tests
